{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                        testID       benchName    base  peak\n",
      "0         cpu95-19990104-03254     101.tomcatv   19.40  27.1\n",
      "1         cpu95-19990104-03254        102.swim   27.20  34.8\n",
      "2         cpu95-19990104-03254      103.su2cor   10.10  9.98\n",
      "3         cpu95-19990104-03254     104.hydro2d    8.58  8.61\n",
      "4         cpu95-19990104-03254       107.mgrid    8.94  9.44\n",
      "...                        ...             ...     ...   ...\n",
      "136990  cpu2006-20120102-19319  462.libquantum  418.00   418\n",
      "136991  cpu2006-20120102-19319     464.h264ref   46.10  50.1\n",
      "136992  cpu2006-20120102-19319     471.omnetpp   19.10  20.2\n",
      "136993  cpu2006-20120102-19319       473.astar   21.10  21.1\n",
      "136994  cpu2006-20120102-19319   483.xalancbmk   28.80  28.8\n",
      "\n",
      "[136995 rows x 4 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (3) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv('benchmarks.txt', sep=\",\",header=0)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn import linear_model\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "# extract number of benchName col and reshape inputs\n",
    "name = list(df['benchName'].values)\n",
    "X = [int(i[0:3]) for i in name]\n",
    "X = np.reshape(X, (len(X),1)) \n",
    "speed = np.log(np.reshape(df['base'].values, (len(df['base'].values),1)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([], <a list of 0 Text yticklabel objects>)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "regr = linear_model.LinearRegression()\n",
    "\n",
    "# Train the model using the training sets\n",
    "regr.fit(X, speed)\n",
    "predict = regr.predict(X)\n",
    "\n",
    "plt.scatter(X, speed,  color='black')\n",
    "plt.plot(X, predict, color='blue', linewidth=3)\n",
    "\n",
    "plt.xticks(())\n",
    "plt.yticks(())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.,  0.,  0., 12., 13.,  5.,  0.,  0.,  0.,  0.,  0., 11., 16.,\n",
       "         9.,  0.,  0.,  0.,  0.,  3., 15., 16.,  6.,  0.,  0.,  0.,  7.,\n",
       "        15., 16., 16.,  2.,  0.,  0.,  0.,  0.,  1., 16., 16.,  3.,  0.,\n",
       "         0.,  0.,  0.,  1., 16., 16.,  6.,  0.,  0.,  0.,  0.,  1., 16.,\n",
       "        16.,  6.,  0.,  0.,  0.,  0.,  0., 11., 16., 10.,  0.,  0.]])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import datasets\n",
    "iris = datasets.load_iris()\n",
    "digits = datasets.load_digits()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=100.0, gamma=0.001)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "clf = svm.SVC(gamma=0.001, C=100.)\n",
    "clf.fit(digits.data[:-3], digits.target[:-3]) #train the clf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([8, 9, 8])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#predict the last 3 data\n",
    "#note that the input must be 2-D so digits.data[-1] does not work as it is 1D\n",
    "clf.predict(digits.data[-3:]) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification report for classifier SVC(gamma=0.001):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           3       1.00      1.00      1.00        54\n",
      "           7       1.00      1.00      1.00        55\n",
      "\n",
      "    accuracy                           1.00       109\n",
      "   macro avg       1.00      1.00      1.00       109\n",
      "weighted avg       1.00      1.00      1.00       109\n",
      "\n",
      "\n",
      "Confusion matrix:\n",
      "[[54  0]\n",
      " [ 0 55]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#K-nearest neigbor\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Import datasets, classifiers and performance metrics\n",
    "from sklearn import datasets, svm, metrics\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# The digits dataset\n",
    "digits = datasets.load_digits()\n",
    "\n",
    "# The data that we are interested in is made of 8x8 images of digits, let's\n",
    "# have a look at the first 4 images, stored in the `images` attribute of the\n",
    "# dataset.  If we were working from image files, we could load them using\n",
    "# matplotlib.pyplot.imread.  Note that each image must have the same size. For these\n",
    "# images, we know which digit they represent: it is given in the 'target' of\n",
    "# the dataset.\n",
    "_, axes = plt.subplots(2, 4)\n",
    "images_and_labels = list(zip(digits.images, digits.target))\n",
    "for ax, (image, label) in zip(axes[0, :], images_and_labels[:4]):\n",
    "    ax.set_axis_off()\n",
    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    ax.set_title('Training: %i' % label)\n",
    "\n",
    "# To apply a classifier on this data, we need to flatten the image, to\n",
    "# turn the data in a (samples, feature) matrix:\n",
    "\n",
    "n_samples = len(digits.images)\n",
    "data = digits.images.reshape((n_samples, -1))\n",
    "\n",
    "# Create a classifier: a support vector classifier\n",
    "classifier = svm.SVC(gamma=0.001)\n",
    "\n",
    "#filter 3 and 7 data\n",
    "\n",
    "mask = [label==3 or label==7 for label in digits.target] \n",
    "X = data[mask]\n",
    "\n",
    "\n",
    "# Split data into train and test subsets\n",
    "\n",
    "\n",
    "y = digits.target[mask]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# We learn the digits on the first half of the digits\n",
    "classifier.fit(X_train, y_train)\n",
    "\n",
    "# Now predict the value of the digit on the second half:\n",
    "predicted = classifier.predict(X_test)\n",
    "\n",
    "images_and_predictions = list(zip(digits.images[n_samples // 2:], predicted))\n",
    "for ax, (image, prediction) in zip(axes[1, :], images_and_predictions[:4]):\n",
    "    ax.set_axis_off()\n",
    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    ax.set_title('Prediction: %i' % prediction)\n",
    "\n",
    "print(\"Classification report for classifier %s:\\n%s\\n\"\n",
    "      % (classifier, metrics.classification_report(y_test, predicted)))\n",
    "disp = metrics.plot_confusion_matrix(classifier, X_test, y_test)\n",
    "disp.figure_.suptitle(\"Confusion Matrix\")\n",
    "print(\"Confusion matrix:\\n%s\" % disp.confusion_matrix)\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
